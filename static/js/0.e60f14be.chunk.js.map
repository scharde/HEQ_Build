{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/getFields.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/hasValidation.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts"],"names":["element","type","value","isObjectType","isNullOrUndefined","Array","isArray","Date","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","isObject","Object","keys","length","isEmptyObject","find","window","HTMLElement","document","isWeb","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","omit","ref","focus","refs","getFieldsValues","fieldsRef","defaultValuesRef","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","target","targetValue","sourceValue","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","data","isBoolean","getFields","fieldsRefs","currentFields","defaultResult","isValid","validResult","options","option","checked","map","attributes","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","valueAsNumber","valueAsDate","setValueAs","NaN","getFieldValueAs","required","min","max","maxLength","minLength","pattern","validate","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","isMessage","validationData","isRegex","a","inputValue","error","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","mode","isOnSubmit","Subscription","tearDowns","tearDown","this","push","teardown","Subscriber","observer","subscription","closed","add","next","Subject","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","fieldsNamesRef","Set","formStateSubjectRef","unregisterFieldsNamesRef","watchSubjectRef","controllerSubjectRef","fieldArraySubjectRef","fieldArrayDefaultValuesRef","watchFieldsRef","isMountedRef","fieldsWithValidationRef","validFieldsRef","isWatchAllRef","contextRef","resolverRef","fieldArrayNamesRef","validationMode","getValidationModes","isValidateAllFieldCriteria","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","setFormState","formStateRef","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","previousError","shouldReRender","updatedFormState","setFieldValue","rawValue","shouldRegister","register","isHTMLElement","forEach","radioRef","selectRef","includes","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","getIsDirty","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","currentNames","validateForm","fieldError","Promise","all","fieldName","setInternalValues","inputKey","isFieldWatched","has","updateValidAndValue","isWithinRefCallback","defaultChecked","isNameInFieldArray","hasValidation","then","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","handleChange","inputType","shouldSkipValidation","skipValidation","previousFormIsValid","parentNodeName","currentError","getValues","fieldNames","updateIsValid","previousIsValid","clearErrors","inputName","setError","shouldFocus","watchInternal","isGlobal","isArrayNames","fieldValues","watch","subscribe","info","unregisterInternal","notify","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","unregister","registerFieldRef","isRadioOrCheckboxFunction","contains","isInitialRegister","onChange","onBlur","handleSubmit","onValid","onInvalid","e","preventDefault","persist","resetFromState","keepErrors","keepIsSubmitted","keepDefaultValues","keepSubmitCount","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","setFocus","formStateSubscription","shouldRenderFormState","useFieldArraySubscription","unsubscribe","isLiveInDom","control","shouldUnmountUnregister","getProxyFormState"],"mappings":"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","file":"static/js/0.e60f14be.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isUndefined from './isUndefined';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormReturn<TFieldValues> =>\n  (React.useContext(FormContext) as unknown) as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={(omit(props, 'children') as unknown) as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T, K extends ReadFormState>(\n  formState: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) =>\n  isEmptyObject(formState) ||\n  Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n  Object.keys(formState).find(\n    (key) =>\n      readFormStateRef[key as keyof ReadFormState] ===\n      (isRoot ? VALIDATION_MODE.all : true),\n  );\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import { UNDEFINED } from '../constants';\n\nimport isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef?: FieldValues,\n  output: Record<string, any> = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      if (current) {\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n      }\n    }\n  }\n\n  return {\n    ...defaultValuesRef,\n    ...output,\n  };\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (Array.isArray(index) ? index : [index]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { SELECT } from '../constants';\nimport { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T) =>\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (\n    value: Observer<T>,\n  ) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormInternalUnregister,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef(\n    new Subject<Partial<FormState<TFieldValues>>>(),\n  );\n  const unregisterFieldsNamesRef = React.useRef<Set<InternalFieldName>>(\n    new Set(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      value?: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () =>\n    (formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors));\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      let shouldReRender =\n        shouldRender ||\n        !deepEqual(previousError, error, true) ||\n        (readFormStateRef.current.isValid &&\n          isUndefined(error) &&\n          get(fieldsWithValidationRef.current, name) &&\n          !get(validFieldsRef.current, name));\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        isWatched\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(isWatched ? {} : updatedFormState);\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const _f = get(fieldsRef.current, name, {})._f as Field['_f'];\n\n      if (_f) {\n        const value =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n            ? ''\n            : rawValue;\n        _f.value = rawValue;\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(\n            (radioRef: HTMLInputElement) =>\n              (radioRef.checked = radioRef.value === value),\n          );\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (value as string[]).includes(\n                selectRef.value,\n              )),\n          );\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1\n            ? _f.refs.forEach(\n                (checkboxRef) =>\n                  (checkboxRef.checked = Array.isArray(value)\n                    ? !!(value as []).find(\n                        (data: string) => data === checkboxRef.value,\n                      )\n                    : value === checkboxRef.value),\n              )\n            : (_f.refs[0].checked = !!value);\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: {\n              ...defaultValuesRef.current,\n              ...values,\n            } as DefaultValues<TFieldValues>,\n            name,\n          });\n        }\n\n        options.shouldDirty && updateAndGetDirtyState(name, value);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(\n          fieldsRef,\n          shouldUnregister ? {} : defaultValuesRef.current,\n        ),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : Array.isArray(name)\n        ? name\n        : [name];\n      let isValid;\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        isValid = isEmptyObject(\n          await executeSchemaOrResolverValidation(\n            fields,\n            isUndefined(name)\n              ? undefined\n              : (fields as FieldName<TFieldValues>[]),\n          ),\n        );\n      } else {\n        isValid = !!(isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : (\n              await Promise.all(\n                fields\n                  .filter((fieldName) => get(fieldsRef.current, fieldName))\n                  .map(\n                    async (fieldName) =>\n                      await executeValidation(fieldName, null),\n                  ),\n              )\n            ).every(Boolean));\n      }\n\n      formStateSubjectRef.current.next({\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current ? isValid : getIsValid(),\n      });\n\n      return isValid;\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n\n        field && !field._f\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    ref?: Ref,\n    isWithinRefCallback?: boolean,\n  ) => {\n    const field = get(fieldsRef.current, name) as Field;\n    const defaultValue = isUndefined(field._f.value)\n      ? get(defaultValuesRef.current, name)\n      : field._f.value;\n\n    if (field && !isUndefined(defaultValue)) {\n      if (ref && (ref as HTMLInputElement).defaultChecked) {\n        field._f.value = getFieldValue(field);\n      } else if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        setFieldValue(name, defaultValue);\n      } else {\n        field._f.value = defaultValue;\n      }\n    }\n\n    if (\n      (!isUndefined(defaultValue) || isWithinRefCallback) &&\n      hasValidation(options) &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid !== getIsValid() &&\n          setFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    (field && !field._f) || isFieldArray\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, value });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f) &&\n            !resolverRef.current &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              value: inputValue,\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(isWatched ? {} : state)\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(\n              fieldsRef,\n              shouldUnregister ? {} : defaultValuesRef.current,\n            ),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            value: inputValue,\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n  ) => {\n    const values = isMountedRef.current\n      ? getFieldsValues(\n          fieldsRef,\n          shouldUnregister ? {} : defaultValuesRef.current,\n        )\n      : defaultValuesRef.current;\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(\n              fieldsRef,\n              shouldUnregister ? {} : defaultValuesRef.current,\n            ),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formStateRef.current.errors, inputName),\n      );\n\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = isMountedRef.current\n        ? getFieldsValues(fieldsRef, defaultValuesRef.current)\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue || {}\n        : { [fieldNames as string]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n        isGlobal && watchFieldsRef.current.add(fieldName as string);\n        result.push(get(fieldValues, fieldName as string));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregisterInternal: UseFormInternalUnregister<TFieldValues> = (\n    name,\n    options = {},\n    notify,\n  ) => {\n    for (const inputName of name\n      ? Array.isArray(name)\n        ? name\n        : [name]\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        (!shouldUnregister || notify) &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n\n        notify &&\n          watchSubjectRef.current.next({\n            name: inputName,\n          });\n      }\n    }\n\n    if (notify) {\n      formStateSubjectRef.current.next({\n        ...formStateRef.current,\n        ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n        ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n      });\n      !options.keepIsValid && updateIsValid();\n    }\n  };\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) =>\n    unregisterInternal(name, options, true);\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) ||\n      (isRadioOrCheckbox &&\n        Array.isArray(field._f.refs) &&\n        compact(field._f.refs).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    const defaultValue = updateValidAndValue(name, options, ref, true);\n\n    if (\n      isRadioOrCheckbox && Array.isArray(defaultValue)\n        ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n        : isUndefined(get(fieldsRef.current, name)._f.value)\n    ) {\n      get(fieldsRef.current, name)._f.value = getFieldValue(\n        get(fieldsRef.current, name),\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref,\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          ...options,\n        },\n      });\n      hasValidation(options) &&\n        set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      isInitialRegister && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null) => {\n              ref\n                ? registerFieldRef(name, ref, options)\n                : (shouldUnregister || (options && options.shouldUnregister)) &&\n                  isWeb &&\n                  unregisterFieldsNamesRef.current.add(name);\n            },\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let fieldValues = {\n        ...(shouldUnregister ? {} : defaultValuesRef.current),\n        ...getFieldsValues(fieldsRef),\n      };\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    (\n      {\n        keepErrors,\n        keepDirty,\n        keepIsSubmitted,\n        keepTouched,\n        keepDefaultValues,\n        keepIsValid,\n        keepSubmitCount,\n      }: KeepStateOptions,\n      values?: DefaultValues<TFieldValues>,\n    ) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty\n          ? formStateRef.current.isDirty\n          : keepDefaultValues\n          ? deepEqual(values, defaultValuesRef.current)\n          : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !!updateIsValid(values),\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of fieldsNamesRef.current) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        value: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    resetFromState(keepStateOptions, values);\n    isMountedRef.current = false;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState: Partial<FormState<TFieldValues>> = {}) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          setFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    isMountedRef.current = true;\n    unregisterFieldsNamesRef.current.forEach((name) => {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregisterInternal(name as FieldPath<TFieldValues>);\n    });\n    unregisterFieldsNamesRef.current = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        watchFieldsRef,\n        getIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister: unregisterInternal,\n        shouldUnmountUnregister: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n"],"sourceRoot":""}