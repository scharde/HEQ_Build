{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/isWeb.ts","../../src/utils/isProxyEnabled.ts","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/getFieldsValues.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/utils/remove.ts","../../src/utils/isBoolean.ts","../../src/utils/unset.ts","../../src/logic/getFields.ts","../../src/utils/isFileInput.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/hasValidation.ts","../../src/logic/skipValidation.ts","../../src/utils/isFunction.ts","../../src/utils/isString.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/utils/getValidationModes.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/Subject.ts","../../src/useForm.ts"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","element","type","value","isObjectType","isNullOrUndefined","Array","isArray","Date","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","UNDEFINED","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","isProxyEnabled","formState","readFormStateRef","localReadFormStateRef","isRoot","Proxy","get","prop","isObject","keys","isEmptyObject","find","window","HTMLElement","document","isWeb","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","callback","fieldsNames","field","_f","omit","ref","focus","refs","getFieldsValues","fieldsRef","defaultValuesRef","output","disabled","every","deepEqual","object1","object2","isErrorObject","isPrimitive","keys1","keys2","val1","val2","deepMerge","targetValue","sourceValue","setDirtyFields","values","defaultValues","dirtyFields","parentNode","parentName","slice","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","data","isBoolean","getFields","fieldsRefs","currentFields","defaultResult","isValid","validResult","options","option","checked","map","attributes","defaultReturn","previous","getFieldValue","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","valueAsNumber","valueAsDate","setValueAs","NaN","getFieldValueAs","required","min","max","maxLength","minLength","pattern","validate","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","isString","RegExp","getValidateError","validationData","isRegex","a","inputValue","error","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateRef","isFunction","validateError","validationResult","entries","validateFunction","validateResult","mode","isOnSubmit","tearDowns","tearDown","this","push","teardown","observer","subscription","closed","add","next","observers","subscriber","isWindowUndefined","useForm","reValidateMode","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","fieldsNamesRef","Set","formStateSubjectRef","unregisterFieldsNamesRef","watchSubjectRef","controllerSubjectRef","fieldArraySubjectRef","fieldArrayDefaultValuesRef","watchFieldsRef","isMountedRef","fieldsWithValidationRef","validFieldsRef","isWatchAllRef","contextRef","resolverRef","fieldArrayNamesRef","validationMode","getValidationModes","isValidateAllFieldCriteria","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","setFormState","formStateRef","getIsValid","shouldRenderBaseOnError","shouldRender","state","isWatched","previousError","shouldReRender","updatedFormState","setFieldValue","rawValue","shouldRegister","register","isHTMLElement","forEach","radioRef","selectRef","includes","checkboxRef","shouldDirty","updateAndGetDirtyState","shouldValidate","trigger","getIsDirty","formValues","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","currentNames","validateForm","fieldError","Promise","all","fieldName","setInternalValues","inputKey","isFieldWatched","has","updateValidAndValue","isWithinRefCallback","defaultChecked","hasValidation","then","setValue","isFieldArray","isReset","setFieldArrayDirtyFields","handleChange","inputType","shouldSkipValidation","skipValidation","previousFormIsValid","parentNodeName","currentError","getValues","fieldNames","updateIsValid","previousIsValid","clearErrors","inputName","setError","shouldFocus","watchInternal","isGlobal","isArrayNames","fieldValues","watch","subscribe","info","unregisterInternal","notify","delete","keepIsValid","keepError","keepValue","keepDirty","keepTouched","keepDefaultValue","unregister","registerFieldRef","isRadioOrCheckboxFunction","contains","isInitialRegister","onChange","onBlur","handleSubmit","onValid","onInvalid","e","preventDefault","persist","resetFromState","keepErrors","keepIsSubmitted","keepDefaultValues","keepSubmitCount","reset","keepStateOptions","updatedValues","keepValues","inputRef","closest","setFocus","formStateSubscription","shouldRenderFormState","useFieldArraySubscription","unsubscribe","isLiveInDom","control","shouldUnmountUnregister","getProxyFormState"],"mappings":"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","file":"static/js/0.13617444.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isUndefined from './isUndefined';\n\nexport default (obj: any = {}, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormReturn<TFieldValues> =>\n  (React.useContext(FormContext) as unknown) as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>(\n  props: FormProviderProps<TFieldValues>,\n) => (\n  <FormContext.Provider\n    value={(omit(props, 'children') as unknown) as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import * as React from 'react';\n\nimport { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  isProxyEnabled: boolean,\n  formState: FormState<TFieldValues>,\n  readFormStateRef: React.MutableRefObject<ReadFormState>,\n  localReadFormStateRef?: React.MutableRefObject<ReadFormState>,\n  isRoot = true,\n) =>\n  isProxyEnabled\n    ? new Proxy(formState, {\n        get: (obj, prop: keyof FormStateProxy) => {\n          if (prop in obj) {\n            if (readFormStateRef.current[prop] !== VALIDATION_MODE.all) {\n              readFormStateRef.current[prop] = isRoot\n                ? VALIDATION_MODE.all\n                : true;\n            }\n            localReadFormStateRef &&\n              (localReadFormStateRef.current[prop] = true);\n            return obj[prop];\n          }\n\n          return undefined;\n        },\n      })\n    : formState;\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T, K extends ReadFormState>(\n  formState: T,\n  readFormStateRef: K,\n  isRoot?: boolean,\n) =>\n  isEmptyObject(formState) ||\n  Object.keys(formState).length >= Object.keys(readFormStateRef).length ||\n  Object.keys(formState).find(\n    (key) =>\n      readFormStateRef[key as keyof ReadFormState] ===\n      (isRoot ? VALIDATION_MODE.all : true),\n  );\n","import { UNDEFINED } from '../constants';\n\nexport default typeof window !== UNDEFINED &&\n  typeof window.HTMLElement !== UNDEFINED &&\n  typeof document !== UNDEFINED;\n","import { UNDEFINED } from '../constants';\n\nimport isWeb from './isWeb';\n\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport default isProxyEnabled;\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName>,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import * as React from 'react';\n\nimport { FieldRefs, FieldValues } from '../types';\nimport omit from '../utils/omit';\nimport set from '../utils/set';\n\nconst getFieldsValues = (\n  fieldsRef: React.MutableRefObject<FieldRefs>,\n  defaultValuesRef?: FieldValues,\n  output: Record<string, any> = {},\n): any => {\n  for (const name in fieldsRef.current) {\n    const field = fieldsRef.current[name];\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      set(\n        output,\n        name,\n        _f\n          ? _f.ref.disabled || (_f.refs && _f.refs.every((ref) => ref.disabled))\n            ? undefined\n            : _f.value\n          : Array.isArray(field)\n          ? []\n          : {},\n      );\n\n      if (current) {\n        getFieldsValues(\n          {\n            current,\n          },\n          defaultValuesRef,\n          output[name],\n        );\n      }\n    }\n  }\n\n  return {\n    ...defaultValuesRef,\n    ...output,\n  };\n};\n\nexport default getFieldsValues;\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\n\nimport isObject from '../utils/isObject';\n\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  if (!React.isValidElement(object1)) {\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n\n    if (keys1.length !== keys2.length) {\n      return false;\n    }\n\n    for (const key of keys1) {\n      const val1 = object1[key];\n\n      if (!(isErrorObject && key === 'ref')) {\n        const val2 = object2[key];\n\n        if (\n          (isObject(val1) || Array.isArray(val1)) &&\n          (isObject(val2) || Array.isArray(val2))\n            ? !deepEqual(val1, val2, isErrorObject)\n            : val1 !== val2\n        ) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","import compact from './compact';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (Array.isArray(index) ? index : [index]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Field, FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isKey from '../utils/isKey';\nimport set from '../utils/set';\n\nexport default function getFields(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  fieldsRefs: FieldRefs,\n) {\n  const currentFields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(fieldsRefs, name) as Field | undefined;\n\n    if (field) {\n      !isKey(name)\n        ? set(currentFields, name, field._f)\n        : (currentFields[name] = field._f);\n    }\n  }\n\n  return currentFields;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { SELECT } from '../constants';\nimport { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(field?: Field) {\n  if (field && field._f) {\n    const ref = field._f.ref;\n\n    if (ref.disabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field._f.refs).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field._f.refs).value;\n    }\n\n    return getFieldValueAs(\n      isUndefined(ref.value) ? field._f.ref.value : ref.value,\n      field._f,\n    );\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Field } from '../types';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { RegisterOptions } from '../types';\n\nexport default <T extends RegisterOptions>(options?: T) =>\n  options &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  {\n    _f: {\n      ref,\n      refs,\n      required,\n      maxLength,\n      minLength,\n      min,\n      max,\n      pattern,\n      validate,\n      name,\n      value: inputValue,\n      valueAsNumber,\n    },\n  }: Field,\n  validateAllFieldCriteria: boolean,\n): Promise<InternalFieldErrors> => {\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox ? (refs || [])[0] || {} : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (\n    (!isNullOrUndefined(min) || !isNullOrUndefined(max)) &&\n    inputValue !== ''\n  ) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(inputValue) && pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const validateRef = isRadioOrCheckbox && refs ? refs[0] : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(inputValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (\n    value: Observer<T>,\n  ) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import * as React from 'react';\n\nimport focusFieldBy from './logic/focusFieldBy';\nimport getFields from './logic/getFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport getNodeParentName from './logic/getNodeParentName';\nimport getProxyFormState from './logic/getProxyFormState';\nimport hasValidation from './logic/hasValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport skipValidation from './logic/skipValidation';\nimport validateField from './logic/validateField';\nimport compact from './utils/compact';\nimport deepEqual from './utils/deepEqual';\nimport get from './utils/get';\nimport getValidationModes from './utils/getValidationModes';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isFileInput from './utils/isFileInput';\nimport isFunction from './utils/isFunction';\nimport isHTMLElement from './utils/isHTMLElement';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isProxyEnabled from './utils/isProxyEnabled';\nimport isRadioInput from './utils/isRadioInput';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport isWeb from './utils/isWeb';\nimport omit from './utils/omit';\nimport set from './utils/set';\nimport Subject from './utils/Subject';\nimport unset from './utils/unset';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  ChangeHandler,\n  DeepPartial,\n  DefaultValues,\n  EventType,\n  Field,\n  FieldArrayDefaultValues,\n  FieldError,\n  FieldName,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  InternalNameSet,\n  KeepStateOptions,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  RegisterOptions,\n  SetFieldValue,\n  SetValueConfig,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormInternalUnregister,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as DefaultValues<TFieldValues>,\n  shouldFocusError = true,\n  shouldUnregister,\n  criteriaMode,\n}: UseFormProps<TFieldValues, TContext> = {}): UseFormReturn<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs>({});\n  const fieldsNamesRef = React.useRef<Set<InternalFieldName>>(new Set());\n  const formStateSubjectRef = React.useRef(\n    new Subject<Partial<FormState<TFieldValues>>>(),\n  );\n  const unregisterFieldsNamesRef = React.useRef<Set<InternalFieldName>>(\n    new Set(),\n  );\n  const watchSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      type?: EventType;\n      value?: unknown;\n    }>(),\n  );\n  const controllerSubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      values: DefaultValues<TFieldValues>;\n    }>(),\n  );\n  const fieldArraySubjectRef = React.useRef(\n    new Subject<{\n      name?: InternalFieldName;\n      fields: any;\n      isReset?: boolean;\n    }>(),\n  );\n  const fieldArrayDefaultValuesRef = React.useRef<FieldArrayDefaultValues>({});\n  const watchFieldsRef = React.useRef<InternalNameSet>(new Set());\n  const isMountedRef = React.useRef(false);\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const isWatchAllRef = React.useRef(false);\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet>(new Set());\n  const validationMode = getValidationModes(mode);\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !validationMode.isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touchedFields: !isProxyEnabled,\n    isValidating: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n    errors: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n\n  const getIsValid = () =>\n    (formStateRef.current.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors));\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName,\n      error?: FieldError,\n      shouldRender: boolean | null = false,\n      state: {\n        dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n      isWatched?: boolean,\n    ): boolean | void => {\n      const previousError = get(formStateRef.current.errors, name);\n\n      let shouldReRender =\n        shouldRender ||\n        !deepEqual(previousError, error, true) ||\n        (readFormStateRef.current.isValid &&\n          isUndefined(error) &&\n          get(fieldsWithValidationRef.current, name) &&\n          !get(validFieldsRef.current, name));\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state) ||\n        isWatched\n      ) {\n        const updatedFormState = {\n          ...state,\n          isValid: resolverRef.current ? !!isValid : getIsValid(),\n          errors: formStateRef.current.errors,\n        };\n\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...updatedFormState,\n        };\n\n        formStateSubjectRef.current.next(isWatched ? {} : updatedFormState);\n      }\n\n      formStateSubjectRef.current.next({\n        isValidating: false,\n      });\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: InternalFieldName,\n      rawValue: SetFieldValue<TFieldValues>,\n      options: SetValueConfig = {},\n      shouldRender?: boolean,\n      shouldRegister?: boolean,\n    ) => {\n      shouldRegister && register(name as Path<TFieldValues>);\n      const _f = get(fieldsRef.current, name, {})._f as Field['_f'];\n\n      if (_f) {\n        const value =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(rawValue)\n            ? ''\n            : rawValue;\n        _f.value = rawValue;\n\n        if (isRadioInput(_f.ref)) {\n          (_f.refs || []).forEach(\n            (radioRef: HTMLInputElement) =>\n              (radioRef.checked = radioRef.value === value),\n          );\n        } else if (isFileInput(_f.ref) && !isString(value)) {\n          _f.ref.files = value as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (value as string[]).includes(\n                selectRef.value,\n              )),\n          );\n        } else if (isCheckBoxInput(_f.ref) && _f.refs) {\n          _f.refs.length > 1\n            ? _f.refs.forEach(\n                (checkboxRef) =>\n                  (checkboxRef.checked = Array.isArray(value)\n                    ? !!(value as []).find(\n                        (data: string) => data === checkboxRef.value,\n                      )\n                    : value === checkboxRef.value),\n              )\n            : (_f.refs[0].checked = !!value);\n        } else {\n          _f.ref.value = value;\n        }\n\n        if (shouldRender) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, name, rawValue);\n          controllerSubjectRef.current.next({\n            values: {\n              ...defaultValuesRef.current,\n              ...values,\n            } as DefaultValues<TFieldValues>,\n            name,\n          });\n        }\n\n        options.shouldDirty && updateAndGetDirtyState(name, value);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    },\n    [],\n  );\n\n  const getIsDirty: GetIsDirty = React.useCallback((name, data) => {\n    const formValues = getFieldsValues(fieldsRef);\n\n    name && data && set(formValues, name, data);\n\n    return !deepEqual(formValues, defaultValuesRef.current);\n  }, []);\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName,\n      inputValue: unknown,\n      shouldRender = true,\n    ): Partial<\n      Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n    > => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesRef.current, name),\n          inputValue,\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        formStateRef.current.isDirty = getIsDirty();\n\n        const state = {\n          isDirty: formStateRef.current.isDirty,\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        isChanged && shouldRender && formStateSubjectRef.current.next(state);\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      const error = (\n        await validateField(\n          get(fieldsRef.current, name) as Field,\n          isValidateAllFieldCriteria,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names: InternalFieldName[],\n      currentNames: FieldName<TFieldValues>[] = [],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getFieldsValues(\n          fieldsRef,\n          shouldUnregister ? {} : defaultValuesRef.current,\n        ),\n        contextRef.current,\n        {\n          criteriaMode,\n          names: currentNames,\n          fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n        },\n      );\n\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(formStateRef.current.errors, name, error)\n          : unset(formStateRef.current.errors, name);\n      }\n\n      return errors;\n    },\n    [criteriaMode],\n  );\n\n  const validateForm = async (fieldsRef: FieldRefs) => {\n    for (const name in fieldsRef) {\n      const field = fieldsRef[name];\n\n      if (field) {\n        const _f = field._f;\n        const current = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            isValidateAllFieldCriteria,\n          );\n\n          if (fieldError[_f.name]) {\n            set(formStateRef.current.errors, _f.name, fieldError[_f.name]);\n            unset(validFieldsRef.current, _f.name);\n          } else if (get(fieldsWithValidationRef.current, _f.name)) {\n            set(validFieldsRef.current, _f.name, true);\n            unset(formStateRef.current.errors, _f.name);\n          }\n        }\n\n        current && (await validateForm(current));\n      }\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = React.useCallback(\n    async (name) => {\n      const fields = isUndefined(name)\n        ? Object.keys(fieldsRef.current)\n        : Array.isArray(name)\n        ? name\n        : [name];\n      let isValid;\n\n      formStateSubjectRef.current.next({\n        isValidating: true,\n      });\n\n      if (resolverRef.current) {\n        isValid = isEmptyObject(\n          await executeSchemaOrResolverValidation(\n            fields,\n            isUndefined(name)\n              ? undefined\n              : (fields as FieldName<TFieldValues>[]),\n          ),\n        );\n      } else {\n        isValid = !!(isUndefined(name)\n          ? await validateForm(fieldsRef.current)\n          : (\n              await Promise.all(\n                fields\n                  .filter((fieldName) => get(fieldsRef.current, fieldName))\n                  .map(\n                    async (fieldName) =>\n                      await executeValidation(fieldName, null),\n                  ),\n              )\n            ).every(Boolean));\n      }\n\n      formStateSubjectRef.current.next({\n        errors: formStateRef.current.errors,\n        isValidating: false,\n        isValid: resolverRef.current ? isValid : getIsValid(),\n      });\n\n      return isValid;\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    (\n      name: FieldPath<TFieldValues>,\n      value: UnpackNestedValue<\n        PathValue<TFieldValues, FieldPath<TFieldValues>>\n      >,\n      options: SetValueConfig,\n    ) =>\n      Object.entries(value).forEach(([inputKey, inputValue]) => {\n        const fieldName = `${name}.${inputKey}` as Path<TFieldValues>;\n        const field = get(fieldsRef.current, fieldName);\n\n        field && !field._f\n          ? setInternalValues(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n            )\n          : setFieldValue(\n              fieldName,\n              inputValue as SetFieldValue<TFieldValues>,\n              options,\n              true,\n              !field,\n            );\n      }),\n    [trigger],\n  );\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    options?: RegisterOptions,\n    ref?: Ref,\n    isWithinRefCallback?: boolean,\n  ) => {\n    const field = get(fieldsRef.current, name) as Field;\n    const defaultValue = isUndefined(field._f.value)\n      ? get(defaultValuesRef.current, name)\n      : field._f.value;\n\n    if (field && !isUndefined(defaultValue)) {\n      if (ref && (ref as HTMLInputElement).defaultChecked) {\n        field._f.value = getFieldValue(field);\n      } else if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        setFieldValue(name, defaultValue);\n      } else {\n        field._f.value = defaultValue;\n      }\n    }\n\n    if (\n      (!isUndefined(defaultValue) || isWithinRefCallback) &&\n      hasValidation(options) &&\n      !validationMode.isOnSubmit &&\n      field &&\n      readFormStateRef.current.isValid\n    ) {\n      validateField(field, isValidateAllFieldCriteria).then((error) => {\n        isEmptyObject(error)\n          ? set(validFieldsRef.current, name, true)\n          : unset(validFieldsRef.current, name);\n\n        formStateRef.current.isValid !== getIsValid() &&\n          setFormState({ ...formStateRef.current, isValid: getIsValid() });\n      });\n    }\n\n    return defaultValue;\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(fieldsRef.current, name);\n    const isFieldArray = fieldArrayNamesRef.current.has(name);\n\n    if (isFieldArray) {\n      fieldArraySubjectRef.current.next({\n        fields: value,\n        name,\n        isReset: true,\n      });\n\n      if (\n        (readFormStateRef.current.isDirty ||\n          readFormStateRef.current.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          formStateRef.current.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(defaultValuesRef.current, name, []),\n            get(formStateRef.current.dirtyFields, name, []),\n          ),\n        );\n\n        formStateSubjectRef.current.next({\n          dirtyFields: formStateRef.current.dirtyFields,\n          isDirty: getIsDirty(name, value),\n        });\n      }\n\n      !(value as []).length &&\n        set(fieldsRef.current, name, []) &&\n        set(fieldArrayDefaultValuesRef.current, name, []);\n    }\n\n    (field && !field._f) || isFieldArray\n      ? setInternalValues(name, value, isFieldArray ? {} : options)\n      : setFieldValue(name, value, options, true, !field);\n\n    isFieldWatched(name) && formStateSubjectRef.current.next({});\n    watchSubjectRef.current.next({ name, value });\n  };\n\n  const handleChange: ChangeHandler = React.useCallback(\n    async ({ type, target, target: { value, type: inputType } }) => {\n      let name = (target as Ref)!.name;\n      let error;\n      let isValid;\n      const field = get(fieldsRef.current, name) as Field;\n\n      if (field) {\n        let inputValue = inputType ? getFieldValue(field) : undefined;\n        inputValue = isUndefined(inputValue) ? value : inputValue;\n\n        const isBlurEvent = type === EVENTS.BLUR;\n        const {\n          isOnBlur: isReValidateOnBlur,\n          isOnChange: isReValidateOnChange,\n        } = getValidationModes(reValidateMode);\n\n        const shouldSkipValidation =\n          (!hasValidation(field._f) &&\n            !resolverRef.current &&\n            !get(formStateRef.current.errors, name)) ||\n          skipValidation({\n            isBlurEvent,\n            isTouched: !!get(formStateRef.current.touchedFields, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            isReValidateOnBlur,\n            isReValidateOnChange,\n            ...validationMode,\n          });\n        const isWatched =\n          !isBlurEvent && isFieldWatched(name as FieldPath<TFieldValues>);\n\n        if (!isUndefined(inputValue)) {\n          field._f.value = inputValue;\n        }\n\n        const state = updateAndGetDirtyState(name, field._f.value, false);\n\n        if (isBlurEvent && !get(formStateRef.current.touchedFields, name)) {\n          set(formStateRef.current.touchedFields, name, true);\n          readFormStateRef.current.touchedFields &&\n            (state.touchedFields = formStateRef.current.touchedFields);\n        }\n\n        let shouldRender = !isEmptyObject(state) || isWatched;\n\n        if (shouldSkipValidation) {\n          !isBlurEvent &&\n            watchSubjectRef.current.next({\n              name,\n              type,\n              value: inputValue,\n            });\n          return (\n            shouldRender &&\n            formStateSubjectRef.current.next(isWatched ? {} : state)\n          );\n        }\n\n        formStateSubjectRef.current.next({\n          isValidating: true,\n        });\n\n        if (resolverRef.current) {\n          const { errors } = await resolverRef.current(\n            getFieldsValues(\n              fieldsRef,\n              shouldUnregister ? {} : defaultValuesRef.current,\n            ),\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields([name], fieldsRef.current),\n              names: [name as FieldName<TFieldValues>],\n            },\n          );\n          const previousFormIsValid = formStateRef.current.isValid;\n          error = get(errors, name);\n\n          if (isCheckBoxInput(target as Ref) && !error) {\n            const parentNodeName = getNodeParentName(name);\n            const currentError = get(errors, parentNodeName, {});\n            currentError.type && currentError.message && (error = currentError);\n\n            if (\n              currentError ||\n              get(formStateRef.current.errors, parentNodeName)\n            ) {\n              name = parentNodeName;\n            }\n          }\n\n          isValid = isEmptyObject(errors);\n\n          previousFormIsValid !== isValid && (shouldRender = true);\n        } else {\n          error = (await validateField(field, isValidateAllFieldCriteria))[\n            name\n          ];\n        }\n\n        !isBlurEvent &&\n          watchSubjectRef.current.next({\n            name,\n            type,\n            value: inputValue,\n          });\n        shouldRenderBaseOnError(\n          name,\n          error,\n          shouldRender,\n          state,\n          isValid,\n          isWatched,\n        );\n      }\n    },\n    [],\n  );\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?: FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n  ) => {\n    const values = isMountedRef.current\n      ? getFieldsValues(\n          fieldsRef,\n          shouldUnregister ? {} : defaultValuesRef.current,\n        )\n      : defaultValuesRef.current;\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const updateIsValid = React.useCallback(\n    async (values = {}) => {\n      const previousIsValid = formStateRef.current.isValid;\n\n      if (resolver) {\n        const { errors } = await resolverRef.current!(\n          {\n            ...getFieldsValues(\n              fieldsRef,\n              shouldUnregister ? {} : defaultValuesRef.current,\n            ),\n            ...values,\n          },\n          contextRef.current,\n          {\n            criteriaMode,\n            fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n          },\n        );\n        formStateRef.current.isValid = isEmptyObject(errors);\n      } else {\n        getIsValid();\n      }\n\n      previousIsValid !== formStateRef.current.isValid &&\n        formStateSubjectRef.current.next({\n          isValid: formStateRef.current.isValid,\n        });\n    },\n    [criteriaMode],\n  );\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        unset(formStateRef.current.errors, inputName),\n      );\n\n    formStateSubjectRef.current.next({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (\n      ((get(fieldsRef.current, name) as Field) || { _f: {} })._f || {}\n    ).ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    formStateSubjectRef.current.next({\n      errors: formStateRef.current.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watchInternal: WatchInternal<TFieldValues> = React.useCallback(\n    (fieldNames, defaultValue, isGlobal) => {\n      const isArrayNames = Array.isArray(fieldNames);\n      const fieldValues = isMountedRef.current\n        ? getFieldsValues(fieldsRef, defaultValuesRef.current)\n        : isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : isArrayNames\n        ? defaultValue || {}\n        : { [fieldNames as string]: defaultValue };\n\n      if (isUndefined(fieldNames)) {\n        isGlobal && (isWatchAllRef.current = true);\n        return fieldValues;\n      }\n\n      const result = [];\n\n      for (const fieldName of isArrayNames ? fieldNames : [fieldNames]) {\n        isGlobal && watchFieldsRef.current.add(fieldName as string);\n        result.push(get(fieldValues, fieldName as string));\n      }\n\n      return isArrayNames ? result : result[0];\n    },\n    [],\n  );\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? watchSubjectRef.current.subscribe({\n          next: (info) =>\n            fieldName(\n              watchInternal(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ) as UnpackNestedValue<TFieldValues>,\n              info,\n            ),\n        })\n      : watchInternal(\n          fieldName as string | string[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregisterInternal: UseFormInternalUnregister<TFieldValues> = (\n    name,\n    options = {},\n    notify,\n  ) => {\n    for (const inputName of name\n      ? Array.isArray(name)\n        ? name\n        : [name]\n      : Object.keys(fieldsNamesRef.current)) {\n      fieldsNamesRef.current.delete(inputName);\n      fieldArrayNamesRef.current.delete(inputName);\n\n      if (get(fieldsRef.current, inputName) as Field) {\n        if (!options.keepIsValid) {\n          unset(fieldsWithValidationRef.current, inputName);\n          unset(validFieldsRef.current, inputName);\n        }\n        !options.keepError && unset(formStateRef.current.errors, inputName);\n        !options.keepValue && unset(fieldsRef.current, inputName);\n        !options.keepDirty &&\n          unset(formStateRef.current.dirtyFields, inputName);\n        !options.keepTouched &&\n          unset(formStateRef.current.touchedFields, inputName);\n        (!shouldUnregister || notify) &&\n          !options.keepDefaultValue &&\n          unset(defaultValuesRef.current, inputName);\n\n        notify &&\n          watchSubjectRef.current.next({\n            name: inputName,\n          });\n      }\n    }\n\n    if (notify) {\n      formStateSubjectRef.current.next({\n        ...formStateRef.current,\n        ...(!options.keepDirty ? {} : { isDirty: getIsDirty() }),\n        ...(resolverRef.current ? {} : { isValid: getIsValid() }),\n      });\n      !options.keepIsValid && updateIsValid();\n    }\n  };\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) =>\n    unregisterInternal(name, options, true);\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    ref: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field = get(fieldsRef.current, name) as Field;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isWeb && isHTMLElement(field._f.ref) && !isHTMLElement(ref)) ||\n      (isRadioOrCheckbox &&\n        Array.isArray(field._f.refs) &&\n        compact(field._f.refs).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(fieldsRef.current, name, field);\n\n    const defaultValue = updateValidAndValue(name, options, ref, true);\n\n    if (\n      isRadioOrCheckbox && Array.isArray(defaultValue)\n        ? !deepEqual(get(fieldsRef.current, name)._f.value, defaultValue)\n        : isUndefined(get(fieldsRef.current, name)._f.value)\n    ) {\n      get(fieldsRef.current, name)._f.value = getFieldValue(\n        get(fieldsRef.current, name),\n      );\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = React.useCallback(\n    (name, options) => {\n      const isInitialRegister = !get(fieldsRef.current, name);\n\n      set(fieldsRef.current, name, {\n        _f: {\n          ...(isInitialRegister\n            ? { ref: { name } }\n            : {\n                ref: (get(fieldsRef.current, name)._f || {}).ref,\n                ...get(fieldsRef.current, name)._f,\n              }),\n          name,\n          ...options,\n        },\n      });\n      hasValidation(options) &&\n        set(fieldsWithValidationRef.current, name, true);\n      fieldsNamesRef.current.add(name);\n      isInitialRegister && updateValidAndValue(name, options);\n\n      return isWindowUndefined\n        ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n        : {\n            name,\n            onChange: handleChange,\n            onBlur: handleChange,\n            ref: (ref: HTMLInputElement | null) => {\n              ref\n                ? registerFieldRef(name, ref, options)\n                : (shouldUnregister || (options && options.shouldUnregister)) &&\n                  isWeb &&\n                  unregisterFieldsNamesRef.current.add(name);\n            },\n          };\n    },\n    [defaultValuesRef.current],\n  );\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> = React.useCallback(\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let fieldValues = {\n        ...(shouldUnregister ? {} : defaultValuesRef.current),\n        ...getFieldsValues(fieldsRef),\n      };\n\n      formStateSubjectRef.current.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            {\n              criteriaMode,\n              fields: getFields(fieldsNamesRef.current, fieldsRef.current),\n            },\n          );\n          formStateRef.current.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(fieldsRef.current);\n        }\n\n        if (\n          isEmptyObject(formStateRef.current.errors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            get(fieldValues, name),\n          )\n        ) {\n          formStateSubjectRef.current.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusFieldBy(\n              fieldsRef.current,\n              (key: string) => get(formStateRef.current.errors, key),\n              fieldsNamesRef.current,\n            );\n        }\n      } finally {\n        formStateRef.current.isSubmitted = true;\n        formStateSubjectRef.current.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          submitCount: formStateRef.current.submitCount + 1,\n          errors: formStateRef.current.errors,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria, criteriaMode],\n  );\n\n  const resetFromState = React.useCallback(\n    (\n      {\n        keepErrors,\n        keepDirty,\n        keepIsSubmitted,\n        keepTouched,\n        keepDefaultValues,\n        keepIsValid,\n        keepSubmitCount,\n      }: KeepStateOptions,\n      values?: DefaultValues<TFieldValues>,\n    ) => {\n      if (!keepIsValid) {\n        validFieldsRef.current = {};\n        fieldsWithValidationRef.current = {};\n      }\n\n      watchFieldsRef.current = new Set();\n      isWatchAllRef.current = false;\n\n      formStateSubjectRef.current.next({\n        submitCount: keepSubmitCount ? formStateRef.current.submitCount : 0,\n        isDirty: keepDirty\n          ? formStateRef.current.isDirty\n          : keepDefaultValues\n          ? deepEqual(values, defaultValuesRef.current)\n          : false,\n        isSubmitted: keepIsSubmitted ? formStateRef.current.isSubmitted : false,\n        isValid: keepIsValid\n          ? formStateRef.current.isValid\n          : !!updateIsValid(values),\n        dirtyFields: keepDirty ? formStateRef.current.dirtyFields : {},\n        touchedFields: keepTouched ? formStateRef.current.touchedFields : {},\n        errors: keepErrors ? formStateRef.current.errors : {},\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n      });\n    },\n    [],\n  );\n\n  const reset: UseFormReset<TFieldValues> = (values, keepStateOptions = {}) => {\n    const updatedValues = values || defaultValuesRef.current;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of fieldsNamesRef.current) {\n        const field = get(fieldsRef.current, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    !keepStateOptions.keepDefaultValues &&\n      (defaultValuesRef.current = { ...updatedValues });\n\n    if (!keepStateOptions.keepValues) {\n      fieldsRef.current = {};\n\n      controllerSubjectRef.current.next({\n        values: { ...updatedValues },\n      });\n\n      watchSubjectRef.current.next({\n        value: { ...updatedValues },\n      });\n\n      fieldArraySubjectRef.current.next({\n        fields: { ...updatedValues },\n        isReset: true,\n      });\n    }\n\n    resetFromState(keepStateOptions, values);\n    isMountedRef.current = false;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(fieldsRef.current, name)._f.ref.focus();\n\n  React.useEffect(() => {\n    const formStateSubscription = formStateSubjectRef.current.subscribe({\n      next(formState: Partial<FormState<TFieldValues>> = {}) {\n        if (shouldRenderFormState(formState, readFormStateRef.current, true)) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...formState,\n          };\n          setFormState(formStateRef.current);\n        }\n      },\n    });\n\n    const useFieldArraySubscription = fieldArraySubjectRef.current.subscribe({\n      next(state) {\n        if (state.fields && state.name && readFormStateRef.current.isValid) {\n          const values = getFieldsValues(fieldsRef);\n          set(values, state.name, state.fields);\n          updateIsValid(values);\n        }\n      },\n    });\n\n    resolverRef.current && readFormStateRef.current.isValid && updateIsValid();\n\n    return () => {\n      watchSubjectRef.current.unsubscribe();\n      formStateSubscription.unsubscribe();\n      useFieldArraySubscription.unsubscribe();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const isLiveInDom = (ref: Ref) =>\n      !isHTMLElement(ref) || !document.contains(ref);\n\n    isMountedRef.current = true;\n    unregisterFieldsNamesRef.current.forEach((name) => {\n      const field = get(fieldsRef.current, name) as Field;\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every(isLiveInDom)\n          : isLiveInDom(field._f.ref)) &&\n        unregisterInternal(name as FieldPath<TFieldValues>);\n    });\n    unregisterFieldsNamesRef.current = new Set();\n  });\n\n  return {\n    control: React.useMemo(\n      () => ({\n        register,\n        isWatchAllRef,\n        watchFieldsRef,\n        getIsDirty,\n        formStateSubjectRef,\n        fieldArraySubjectRef,\n        controllerSubjectRef,\n        watchSubjectRef,\n        watchInternal,\n        fieldsRef,\n        validFieldsRef,\n        fieldsWithValidationRef,\n        fieldArrayNamesRef,\n        readFormStateRef,\n        formStateRef,\n        defaultValuesRef,\n        fieldArrayDefaultValuesRef,\n        unregister: unregisterInternal,\n        shouldUnmountUnregister: shouldUnregister,\n      }),\n      [],\n    ),\n    formState: getProxyFormState<TFieldValues>(\n      isProxyEnabled,\n      formState,\n      readFormStateRef,\n    ),\n    trigger,\n    register,\n    handleSubmit,\n    watch: React.useCallback(watch, []),\n    setValue: React.useCallback(setValue, [setInternalValues]),\n    getValues: React.useCallback(getValues, []),\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    unregister: React.useCallback(unregister, []),\n    setError: React.useCallback(setError, []),\n    setFocus: React.useCallback(setFocus, []),\n  };\n}\n"],"sourceRoot":""}